TITLE Z80 eForth

PAGE 90,132     ;90 lines/page, 132 char/line,

;===============================================================
;
;       Z80 eForth 1.0 by Ken Chen,   April 10, 1991
;
;       This eForth system was developed and tested under Z80 HW.
;
;       The eForth Model was developed by Bill Muench and C. H. Ting.
;
;       The goal of this implementation is to build a eForth on my working
;       environment.
;
;       Deviations from the original eForth Model are:
;
;             o All kernel words are assembled as DB statements.
;             o Memory map is tailored to a ROM based system.
;             o FORTH vocabulary pointer is a pair user variables.
;             o Since 'NEXT' is used in FOR-NEXT, so 'NextStep' is used for
;               Virtual Forth CPU 'NEXT'
;             o BYE is deleted.
;             o call, is chnaged for absolute calling ( vs 8086 model)
;             o I/O: there is a Rx interrupt, recevie char to SiobRxQ,
;                    SiobRxQ is an one page ring Q (pointer wrapping in the page)
;                    Received is put to where SiobRxQin pointing, and increment
;                    SiobRxQout is where system read char.
;                    Tx is by polling to tx.
;             o Registers assigment:
;                 SP  --  SP
;                 IP  --  BC
;                 RP  --  Memory
;                 UP  --  Memory
;
;
;        To assemble this source file and generate a ROM image,
;       type the following commands using MASM and LINK:
;               >MASM efZ80;
;               >LINK efZ80;
;               >EXE2BIN efZ80.exe efZ80.com
;       The resulting efZ80.com contains the binary image suitable
;       for PROM programming.  The actual image is offset by 0000H
;       bytes from the beginning of the .EXE file.  This image
;       must be placed in a PROM from 0 to 1FFFH, and it uses a RAM
;       chip from C000H to FFFFH.  If your system does not have
;       this memory configuration, modify the memory pointers in
;       the source file accordingly.  Places to be modified are
;       marked by '******'.
;
;       Z80  is a slow processor.  Do not expect great performance
;       of this implementation, considering that most words are in high
;       level.  Your are encouraged to recode some of the high level words
;       to optimize its performance.
;
;       Comparsion of F83 (indeirect threaded) to eForth Z80,
;       eForth Z80 can run quit faster than F83 Z80 because:
;
;  eForth NextStep:
;               LD  A, (BC); 7t
;               INC BC     ; 6t
;               LD  L, A   ; 4t
;               LD  A, (BC); 7t
;               INC BC     ; 6t
;               LD  H, A   ; 4t
;               JP  (HL)   ; 4t
;                          ; 38t==(10MHz)3.8 usec.
;
;  eForth  doLIST:
;               (NOP CALL doLIST == 21)
;               LD  HL, (RP) ;16t
;               DEC HL       ; 6t
;               LD  (HL), B  ; 7t
;               DEC HL       ; 6t
;               LD  (HL), C  ; 7t
;               LD  (RP), HL ;16t
;               POP BC       ;10t
;
;               JP  NextStep ;10t
;                            ;107t (10MHz==10.7usec)
;                             (107+38=145)
;
;  eForth EXIT:
;               LD  HL, (RP) ;16t
;               LD  C, (HL)  ; 7t
;               INC HL       ; 6t
;               LD  B, (HL)  ; 7t
;               INC HL       ; 6t
;               LD  (RP),HL  ;16t
;
;               JP  NextStep ;10t
;                            ;68t==6.8us
;                            (68+38=108)
;
;
;  F83 Z80:
;       LABEL >NEXT A (BC) LD, BC INC, L A LD, A (BC) LD, BC INC, H A LD,
;                       7        6       4        7         6       4
;                   E (HL) LD, HL INC, D (HL) LD, DE HL EX, (HL) JP,
;                       7        6        7          4        4     total=62t
;       LABEL NEST
;         HL RP ) LD,  HL DEC, (HL) B LD, HL DEC, (HL) C LD,
;             16         6         7        6        7
;         RP ) HL LD,  DE INC, C E LD, B D LD, >NEXT JP,
;             16         6       4        4      10              ===>total=82
;       CODE EXIT                                                (82+62=144)
;          HL RP ) LD, C (HL) LD, HL INC, B (HL) LD, HL INC,
;             16         7           6      7          6
;          RP ) HL LD,   >NEXT JP,
;             16           10                                     ==>total=68
;                                                                 (68+62=130)
;
;                                 eForth      F83
;  Summary: Code word overhead:     38         62
;             :       overhead:    107+38=135  82+62=144
;             ;       overhead:     68+38=106  68+62=130
;  Conclusion:
;    eForth Z80 is remarkable faster, especially when CODE defined (38/62 clock)
;    ( most kernel primitives 35~70 clock)
;
;
;  Note on improvement:
;       To minmize the change from the original model, some speed and memory
;       improvment is not put on this release but it is worth to enhance:
;
;    1. NOP CALL doLIST  -- it cause 4 bytes and 21 clocks.
;              improvemnet:  use NOP RST 8 (doList at 0008H) may save 2 bytes
;                            and reduce to 15 clocks
;              related change: call, :  USER  CREATE
;
;    2. Top of stack may be put to DE register, many stack POP--PUSH may be
;       reduced and cuase nomally ten more clock save.
;              related change: most code-words and PICK, DEPTH .. .
;
;    3. Join NextStep to just behind doLIST and EXIT will cut a 'JP NextStep'
;       and will save 10 clock each.
;
;    4. NextStep address may be put to IY (or IX) then
;      'JP (IY)' use 2 bytes and 8 clocks (JP NextStep: 3 bytes and 10 clocks)
;      a more important advantage is: revectoring IY (originally NextStep)
;                  may easily patch a debuger in ROMed enivronment.
;
;      Thanks to FIG Forth, F83, eForth implemneters. Their efforts and
;      open-minded contributions made all this work easy.
;      Also thanks to my friend Cherng Chin who gave me many valuable
;      suggestions and discussion.
;
;
;       Direct your questions and contributions to:
;
;               Dr. C. H. Ting
;               156 14th Avenue
;               San Mateo, CA 94402
;               (415) 571-7639
;
;       or:
;               Ken Chen
;               No. 20, Lane 2, Ann-Her Street
;               Hsinchu, Taiwan, R.O.C.
;               Tel: O) 035-782323 Internal prefix 011-883
;                    H) 035-779567
;===============================================================

;; Version control

VER             EQU     01H                     ;major release version
EXT             EQU     00H                     ;minor extension

;; Constants

COMPO           EQU     040H                    ;lexicon compile only bit
IMEDD           EQU     080H                    ;lexicon immediate bit
MASKK           EQU     07F1FH                  ;lexicon bit mask

CELLL           EQU     2                       ;size of a cell
BASEE           EQU     0AH                     ;default radix
VOCSS           EQU     8                       ;depth of vocabulary stack

BKSPP           EQU     8                       ;backspace
LF              EQU     0AH                     ;line feed
CRR             EQU     0DH                     ;carriage return
ERR             EQU     1BH                     ;error escape
TIC             EQU     27H                     ;tick

CALLL           EQU     0CD00H                  ;NOP CALL opcodes
LISTT           EQU     DOLST                   ;CALL doLIST address


INCLUDE memory.inc


;; Initialize assembly variables

_LINK   = 0                                     ;force a null link
_NAME   = NAMEE                                 ;initialize name pointer
_CODE   = CODEE                                 ;initialize code pointer
_USER   = 4*CELLL                               ;first user variable offset


;; Define assembly macros

;       Adjust an address to the next cell boundary.

$ALIGN  MACRO
        EVEN                                    ;;for 16bit systems
        ENDM

;       Compile a code definition header.

$CODE   MACRO   LEX,NAME,LABEL
        $ALIGN                            ;;force to cell boundary
LABEL:                                    ;;assembly label
        _CODE   = $                       ;;save code pointer
        _LEN    = (LEX AND 01FH)/CELLL    ;;string cell count, round down
        _NAME   = _NAME-((_LEN+3)*CELLL)  ;;cell boundary, downward
ORG     _NAME                             ;;set name pointer
        DW       _CODE,_LINK              ;;token pointer and link
        _LINK   = $                       ;;link points to a name string
        DB      LEX,NAME                  ;;name string
ORG     _CODE                             ;;restore code pointer
        ENDM

;       Compile a colon definition header

$COLON  MACRO   LEX,NAME,LABEL
        $CODE   LEX,NAME,LABEL
        DW      CALLL                     ;;align to cell boundary******
        DW      LISTT                     ;;include CALL doLIST******
        ENDM

;       Compile a user variable header.

$USER   MACRO   LEX,NAME,LABEL
        $CODE   LEX,NAME,LABEL
        DW      CALLL                     ;;align to cell boundary******
        DW      LISTT                     ;;include CALL doLIST******
        DW      DOUSE,_USER               ;;followed by doUSER and offset
        _USER   = _USER+CELLL             ;;update user area offset
        ENDM

;       Compile an inline string.

D$      MACRO   FUNCT,STRNG
        DW      FUNCT                     ;;function
        _LEN    = $                       ;;save address of count byte
        DB      0,STRNG                   ;;count byte and string
        _CODE   = $                       ;;save code pointer
ORG     _LEN                              ;;point to count byte
        DB      _CODE-_LEN-1              ;;set count
ORG     _CODE                             ;;restore code pointer
        $ALIGN
        ENDM


;; Main entry points and COLD start data

MAIN    SEGMENT
ASSUME  CS:MAIN,DS:MAIN,ES:MAIN,SS:MAIN
ORG     CODEE                                   ;start code dictionary
ORIG:   ;Cold boot routine

ORG     BM                                ;Power up location******


INCLUDE lowmem.inc


ORG     BM + 80H         ;User variable initial values

; COLD start moves the following to USER variables.
; MUST BE IN SAME ORDER AS USER VARIABLES.

$ALIGN                                  ;align to cell boundary

UZERO           DW      4 DUP (0)       ;reserved
                DW      SPP             ;SP0
                DW      RPP             ;RP0
                DW      QRX             ;'?KEY
                DW      TXSTO           ;'EMIT
                DW      ACCEP           ;'EXPECT
                DW      KTAP            ;'TAP
                DW      TXSTO           ;'ECHO
                DW      DOTOK           ;'PROMPT
                DW      BASEE           ;BASE
                DW      0               ;tmp
                DW      0               ;SPAN
                DW      0               ;>IN
                DW      0               ;#TIB
                DW      TIBB            ;TIB
                DW      0               ;CSP
                DW      INTER           ;'EVAL
                DW      NUMBQ           ;'NUMBER
                DW      0               ;HLD
                DW      0               ;HANDLER
                DW      0               ;CONTEXT pointer
                DW      VOCSS DUP (0)   ;vocabulary stack    ???
                DW      0               ;CURRENT pointer
                DW      0               ;vocabulary link pointer ???
                DW      0C000H          ;CP  for runing phase on RAM
                DW      0DFFEH          ;NP  for runing phase on RAM
                DW      LASTN           ;LAST
                DW      LASTN           ;FORTH   \ mullti-user ???
                DW      0               ;vocabulary link       ???
ULAST:


INCLUDE coldstart.inc

INCLUDE nextstep.inc

INCLUDE kernel.inc

INCLUDE initdev.inc

INCLUDE portio.inc

INCLUDE siorxtx.inc

INCLUDE words.inc

LASTN           EQU     _NAME+4      ;last name address

NTOP            EQU     0DFFEH       ;next available memory in name dictionary
CTOP            EQU     0C000H       ;next available memory in code dictionary

MAIN    ENDS
END     ORIG
